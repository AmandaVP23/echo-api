// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: chat.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "chat";

/** Request to send a message */
export interface SendMessageRequest {
  senderId: string;
  recipientId: string;
  content: string;
}

/** Response for sending a message */
export interface SendMessageResponse {
  status: string;
  /** If the recipient needs to accept first */
  requestId: string;
}

/** Request to accept a chat request */
export interface AcceptMessageRequest {
  requestId: string;
}

/** Response after accepting a request */
export interface AcceptMessageResponse {
  status: string;
}

/** Streaming request */
export interface ChatStreamRequest {
  userId: string;
}

/** Streaming response */
export interface ChatMessage {
  senderId: string;
  recipientId: string;
  content: string;
}

function createBaseSendMessageRequest(): SendMessageRequest {
  return { senderId: "", recipientId: "", content: "" };
}

export const SendMessageRequest: MessageFns<SendMessageRequest> = {
  encode(message: SendMessageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.senderId !== "") {
      writer.uint32(10).string(message.senderId);
    }
    if (message.recipientId !== "") {
      writer.uint32(18).string(message.recipientId);
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendMessageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendMessageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.senderId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.recipientId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendMessageRequest {
    return {
      senderId: isSet(object.senderId) ? globalThis.String(object.senderId) : "",
      recipientId: isSet(object.recipientId) ? globalThis.String(object.recipientId) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
    };
  },

  toJSON(message: SendMessageRequest): unknown {
    const obj: any = {};
    if (message.senderId !== "") {
      obj.senderId = message.senderId;
    }
    if (message.recipientId !== "") {
      obj.recipientId = message.recipientId;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendMessageRequest>, I>>(base?: I): SendMessageRequest {
    return SendMessageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendMessageRequest>, I>>(object: I): SendMessageRequest {
    const message = createBaseSendMessageRequest();
    message.senderId = object.senderId ?? "";
    message.recipientId = object.recipientId ?? "";
    message.content = object.content ?? "";
    return message;
  },
};

function createBaseSendMessageResponse(): SendMessageResponse {
  return { status: "", requestId: "" };
}

export const SendMessageResponse: MessageFns<SendMessageResponse> = {
  encode(message: SendMessageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendMessageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendMessageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendMessageResponse {
    return {
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: SendMessageResponse): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendMessageResponse>, I>>(base?: I): SendMessageResponse {
    return SendMessageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendMessageResponse>, I>>(object: I): SendMessageResponse {
    const message = createBaseSendMessageResponse();
    message.status = object.status ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseAcceptMessageRequest(): AcceptMessageRequest {
  return { requestId: "" };
}

export const AcceptMessageRequest: MessageFns<AcceptMessageRequest> = {
  encode(message: AcceptMessageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AcceptMessageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAcceptMessageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AcceptMessageRequest {
    return { requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "" };
  },

  toJSON(message: AcceptMessageRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AcceptMessageRequest>, I>>(base?: I): AcceptMessageRequest {
    return AcceptMessageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AcceptMessageRequest>, I>>(object: I): AcceptMessageRequest {
    const message = createBaseAcceptMessageRequest();
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseAcceptMessageResponse(): AcceptMessageResponse {
  return { status: "" };
}

export const AcceptMessageResponse: MessageFns<AcceptMessageResponse> = {
  encode(message: AcceptMessageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AcceptMessageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAcceptMessageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AcceptMessageResponse {
    return { status: isSet(object.status) ? globalThis.String(object.status) : "" };
  },

  toJSON(message: AcceptMessageResponse): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AcceptMessageResponse>, I>>(base?: I): AcceptMessageResponse {
    return AcceptMessageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AcceptMessageResponse>, I>>(object: I): AcceptMessageResponse {
    const message = createBaseAcceptMessageResponse();
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseChatStreamRequest(): ChatStreamRequest {
  return { userId: "" };
}

export const ChatStreamRequest: MessageFns<ChatStreamRequest> = {
  encode(message: ChatStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatStreamRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: ChatStreamRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatStreamRequest>, I>>(base?: I): ChatStreamRequest {
    return ChatStreamRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChatStreamRequest>, I>>(object: I): ChatStreamRequest {
    const message = createBaseChatStreamRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseChatMessage(): ChatMessage {
  return { senderId: "", recipientId: "", content: "" };
}

export const ChatMessage: MessageFns<ChatMessage> = {
  encode(message: ChatMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.senderId !== "") {
      writer.uint32(10).string(message.senderId);
    }
    if (message.recipientId !== "") {
      writer.uint32(18).string(message.recipientId);
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.senderId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.recipientId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatMessage {
    return {
      senderId: isSet(object.senderId) ? globalThis.String(object.senderId) : "",
      recipientId: isSet(object.recipientId) ? globalThis.String(object.recipientId) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
    };
  },

  toJSON(message: ChatMessage): unknown {
    const obj: any = {};
    if (message.senderId !== "") {
      obj.senderId = message.senderId;
    }
    if (message.recipientId !== "") {
      obj.recipientId = message.recipientId;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatMessage>, I>>(base?: I): ChatMessage {
    return ChatMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChatMessage>, I>>(object: I): ChatMessage {
    const message = createBaseChatMessage();
    message.senderId = object.senderId ?? "";
    message.recipientId = object.recipientId ?? "";
    message.content = object.content ?? "";
    return message;
  },
};

/** The chat service definition. */
export type ChatServiceService = typeof ChatServiceService;
export const ChatServiceService = {
  /** Send a message, requiring recipient approval for the first message */
  sendMessage: {
    path: "/chat.ChatService/SendMessage",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SendMessageRequest) => Buffer.from(SendMessageRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SendMessageRequest.decode(value),
    responseSerialize: (value: SendMessageResponse) => Buffer.from(SendMessageResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SendMessageResponse.decode(value),
  },
  /** Accept a chat request */
  acceptMessage: {
    path: "/chat.ChatService/AcceptMessage",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AcceptMessageRequest) => Buffer.from(AcceptMessageRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AcceptMessageRequest.decode(value),
    responseSerialize: (value: AcceptMessageResponse) => Buffer.from(AcceptMessageResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AcceptMessageResponse.decode(value),
  },
  /** Stream messages */
  chatStream: {
    path: "/chat.ChatService/ChatStream",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: ChatStreamRequest) => Buffer.from(ChatStreamRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ChatStreamRequest.decode(value),
    responseSerialize: (value: ChatMessage) => Buffer.from(ChatMessage.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ChatMessage.decode(value),
  },
} as const;

export interface ChatServiceServer extends UntypedServiceImplementation {
  /** Send a message, requiring recipient approval for the first message */
  sendMessage: handleUnaryCall<SendMessageRequest, SendMessageResponse>;
  /** Accept a chat request */
  acceptMessage: handleUnaryCall<AcceptMessageRequest, AcceptMessageResponse>;
  /** Stream messages */
  chatStream: handleServerStreamingCall<ChatStreamRequest, ChatMessage>;
}

export interface ChatServiceClient extends Client {
  /** Send a message, requiring recipient approval for the first message */
  sendMessage(
    request: SendMessageRequest,
    callback: (error: ServiceError | null, response: SendMessageResponse) => void,
  ): ClientUnaryCall;
  sendMessage(
    request: SendMessageRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SendMessageResponse) => void,
  ): ClientUnaryCall;
  sendMessage(
    request: SendMessageRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SendMessageResponse) => void,
  ): ClientUnaryCall;
  /** Accept a chat request */
  acceptMessage(
    request: AcceptMessageRequest,
    callback: (error: ServiceError | null, response: AcceptMessageResponse) => void,
  ): ClientUnaryCall;
  acceptMessage(
    request: AcceptMessageRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AcceptMessageResponse) => void,
  ): ClientUnaryCall;
  acceptMessage(
    request: AcceptMessageRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AcceptMessageResponse) => void,
  ): ClientUnaryCall;
  /** Stream messages */
  chatStream(request: ChatStreamRequest, options?: Partial<CallOptions>): ClientReadableStream<ChatMessage>;
  chatStream(
    request: ChatStreamRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<ChatMessage>;
}

export const ChatServiceClient = makeGenericClientConstructor(ChatServiceService, "chat.ChatService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ChatServiceClient;
  service: typeof ChatServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
